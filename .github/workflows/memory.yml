name: 基址修改在线构建

on:
  # 保留 push / PR 触发
  push:
  pull_request:
  
  workflow_dispatch:
    inputs:
      package_name:
        description: '包名（字符串）'
        required: true
        type: string
      module:
        description: '模块（字符串）'
        required: true
        type: string
      memory:
        description: '内存（字符串）'
        required: true
        type: string
      module_index:
        description: '模块索引（整数）'
        required: true
        type: string
      pointer_chain:
        description: '指针链条（字符串）'
        required: true
        type: string
      modify_mode:
        description: '修改方式'
        required: true
        type: choice
        options:
          - 读取
          - 修改
          - 读取并修改
          - 修改冻结
      value_type:
        description: '修改类型'
        required: true
        type: choice
        options:
          - float
          - int
      modify_value:
        description: '修改值'
        required: true
        type: string
      platform:
        description: '平台'
        required: true
        type: choice
        options:
          - 真机 64
          - 模拟器 64

env:
  NDK_VERSION: r27
  NDK_INSTALL_DIR: ${{ github.workspace }}/android-ndk-r27

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 打印用户输入
      - name: 打印用户输入参数
        run: |
          echo "包名        : ${{ github.event.inputs.package_name }}"
          echo "模块        : ${{ github.event.inputs.module }}"
          echo "内存        : ${{ github.event.inputs.memory }}"
          echo "模块索引    : ${{ github.event.inputs.module_index }}"
          echo "指针链条    : ${{ github.event.inputs.pointer_chain }}"
          echo "修改方式    : ${{ github.event.inputs.modify_mode }}"
          echo "修改值      : ${{ github.event.inputs.modify_value }}"
          echo "修改类型    : ${{ github.event.inputs.value_type }}"
          echo "平台        : ${{ github.event.inputs.platform }}"
      # 2. 常规 checkout
      - name: Checkout source
        uses: actions/checkout@v4

      # 3. 缓存 NDK
      - name: Cache NDK
        id: cache-ndk
        uses: actions/cache@v4
        with:
          path: ${{ env.NDK_INSTALL_DIR }}
          key: ndk-${{ env.NDK_VERSION }}-linux

      # 4. 仅缓存未命中时下载并解压
      - name: Install Android NDK
        if: steps.cache-ndk.outputs.cache-hit != 'true'
        run: |
          set -e
          echo "Downloading NDK ${{ env.NDK_VERSION }} ..."
          wget -q "https://dl.google.com/android/repository/android-ndk-${{ env.NDK_VERSION }}-linux.zip"
          unzip -q android-ndk-${{ env.NDK_VERSION }}-linux.zip -d /tmp
          mv /tmp/android-ndk-${{ env.NDK_VERSION }} ${{ env.NDK_INSTALL_DIR }}
          rm android-ndk-${{ env.NDK_VERSION }}-linux.zip

      # 5. 准备 build 目录
      - name: Prepare build directory
        run: |
          mkdir -p build
          rsync -a --exclude='build' . build/

      # 5.1. 替换 memory.cpp 中的包名、模块、索引、内存、指针链
      - name: 替换 memory.cpp 参数
        run: |
          # 替换包名
          sed -i "s/init(\"[^\"]*\");/init(\"${{ github.event.inputs.package_name }}\");/" memory.cpp
          # 替换模块、索引、内存（更宽松匹配）
          sed -i "s/smemory::get_module_base_str( *\"[^\"]*\" *, *[0-9]* *, *\"[^\"]*\" *)/smemory::get_module_base_str(\"${{ github.event.inputs.module }}\", ${{ github.event.inputs.module_index }}, \"${{ github.event.inputs.memory }}\" )/" memory.cpp
          # 替换指针链条（+变,，支持空值）
          chain=$(echo "${{ github.event.inputs.pointer_chain }}" | sed 's/+/,/g')
          if [ -n "$chain" ]; then
            sed -i "s/std::vector<uintptr_t> pointers = {[^}]*/std::vector<uintptr_t> pointers = { $chain/" memory.cpp
          fi
          cat memory.cpp
      # 5.2. 根据修改方式插入操作代码
      - name: 根据修改方式插入操作代码
        run: |
          mode="${{ github.event.inputs.modify_mode }}"
          vtype="${{ github.event.inputs.value_type }}"
          mvalue="${{ github.event.inputs.modify_value }}"
          code=""
          if [ "$mode" = "读取" ]; then
            if [ "$vtype" = "int" ]; then
              code='auto value = smemory::read_int(module_base);\n    std::cout << "读取数据: " << value << std::endl;'
            else
              code='auto value = smemory::read_float(module_base);\n    std::cout << "读取数据: " << value << std::endl;'
            fi
          elif [ "$mode" = "修改" ]; then
            if [ "$vtype" = "int" ]; then
              code="smemory::write_int(module_base, $mvalue);"
            else
              code="smemory::write_float(module_base, $mvalue);"
            fi
          elif [ "$mode" = "读取并修改" ]; then
            if [ "$vtype" = "int" ]; then
              code='auto value = smemory::read_int(module_base);\n    std::cout << "原始数据: " << value << std::endl;\n    smemory::write_int(module_base, '$mvalue');\n    auto value2 = smemory::read_int(module_base);\n    std::cout << "修改后数据: " << value2 << std::endl;'
            else
              code='auto value = smemory::read_float(module_base);\n    std::cout << "原始数据: " << value << std::endl;\n    smemory::write_float(module_base, '$mvalue');\n    auto value2 = smemory::read_float(module_base);\n    std::cout << "修改后数据: " << value2 << std::endl;'
            fi
          elif [ "$mode" = "修改冻结" ]; then
            if [ "$vtype" = "int" ]; then
              code='while(true) { smemory::write_int(module_base, '$mvalue'); }'
            else
              code='while(true) { smemory::write_float(module_base, '$mvalue'); }'
            fi
          fi
          # 插入到 return 0; 之前
          awk -v code="$code" '{if($0~/return 0;/){print code; print $0} else {print $0}}' memory.cpp > memory.cpp.tmp && mv memory.cpp.tmp memory.cpp
      # 6. 使用 ndk-build 构建
      - name: Run ndk-build
        run: |
          export ANDROID_NDK_HOME=${{ env.NDK_INSTALL_DIR }}
          export PATH=$ANDROID_NDK_HOME:$PATH
          cd build
          $ANDROID_NDK_HOME/ndk-build -j$(nproc)

      # 7. 上传构建产物
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ndk-build-output
          path: build/libs
